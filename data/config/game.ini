; Waves - config file
; Should be used with orx v.1.8+

[Display]
; ScreenWidth   = 1920
; ScreenHeight  = 1080
Title         = Waves
VSync         = true
Smoothing     = false
FullScreen    = true
AllowResize   = false
ShaderVersion = 120

[Input]
SetList       = InGameInput

[InGameInput]
KEY_ESCAPE    = Quit
MOUSE_LEFT    = Action
KEY_SPACE     = Action

[Render]
ConsoleColor  = (0, 0, 255)

[Game]
SaveFile      = waves.sav
ViewportList  = ShadowViewport # LightingViewport # LevelViewport # CompositingViewport
PickGroupList = Overlay # UI # Back
LevelList     = 00_Tutorial_1 # 01_Tutorial_2 # 02_Tutorial_3 # 03_Tutorial_4

[Config]
DefaultParent = Default

[Default]
Group         = Game
Graphic       = @
Pivot         = center truncate
SlotList      = @
KeepInCache   = true

[DefaultShader]
Code          = "
void main()
{
  gl_FragData[0] = gl_Color.rgba * texture2D(texture, gl_TexCoord[0].xy).rgba;
  gl_FragData[1] = vec4(0.0);
}
"
ParamList     = texture

[NoG@ScrollObject]
Text          = @
String        =

[G-Dummy]
Text          = @
String        =

[MainViewport]
BackgroundColor= (0, 0, 0)
BackgroundAlpha= 0
Camera        = MainCamera
TextureList   = BackTexture # OccluderTexture

[MainCamera]
GroupList     = Background # Game # Foreground # UI # Cursor # Overlay
FrustumWidth  = 1920
FrustumHeight = 1080
FrustumFar    = 2
Position      = (960, 540, -1)

[LevelViewport]
BackgroundColor= (0, 0, 0)
Camera        = LevelCamera
TextureList   = LevelTexture # ValidateTexture

[LevelCamera@MainCamera]
GroupList     = Level

[ShadowViewport]
AutoResize      = false
TextureList     = ShadowTexture
Size            = (2048, 5, 0)
BackgroundColor = (0, 0, 0)
BlendMode       = none
ShaderList      = @
Code            = "
void main()
{
  float fIndex;

  // Gets light index
  fIndex = gl_FragCoord.y;

  // Is active?
  if(fIndex < 4.0)
  {
    float fAngle, fDistance, fR, fG, fB, fRecRadius;
    vec2  vOffset, vOrigin, vPos, vRecRes;

    // Gets resolution reciprocals
    vRecRes = vec2(1.0) / resolution.xy;

    // Gets ray angle
    fAngle = gl_FragCoord.x * (6.283185 / 2048.0);

    // Gets ray offset
    vOffset = vec2(cos(fAngle), sin(fAngle)) * vRecRes;

    // Gets ray origin
    int iIndex = int(fIndex);
    vOrigin = SourceList[iIndex].xy;

    // Gets distance
    for(vPos = vOrigin; vPos.x >= 0.0 && vPos.y >= 0.0 && vPos.x <= 1.0 && vPos.y <= 1.0; vPos += vOffset)
    {
      // Hit something?
      if(texture2D(occlu, vPos).r != 0.0)
      {
        // Stops
        break;
      }
    }

    // Computes distance
    vec2 dist = vPos - vOrigin;
    dist.y *= 1080.0 / 1920.0;
    fDistance = 1920.0 * length(dist);

    // Separates it
    fR = mod(fDistance, 256.0);
    fDistance = (fDistance - fR) / 256.0;
    fG = mod(fDistance, 256.0);
    fDistance = (fDistance - fG) / 256.0;
    fB = mod(fDistance, 256.0);

    // Updates color
    gl_FragColor = vec4(vec3(1.0 / 256.0) * vec3(fR, fG, fB), 1.0);
  }
  else
  {
    // Inactive
    gl_FragColor = vec4(0.0);
  }
}"
ParamList       = occlu # resolution # lights # SourceList
occlu           = OccluderTexture
SourceList      = (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0)

% > Config.GetValue MainCamera FrustumHeight
% > Config.GetValue MainCamera FrustumWidth
%   Config.SetValue ShadowViewport resolution "(<, <, 0)"

[LightingViewport]
AutoResize      = false
BackgroundColor = (255, 255, 255)
TextureList     = LightingTexture
BlendMode       = multiply
Size            = (1920, 1080, 0)
ShaderList      = @
Code            = "
float GetShadowContribution(vec2 _vCoord, float _fDistance, float _fRadius)
{
  vec3  vShadow;
  float fShadowDistance;

  // Gets shadow value
  vShadow = texture2D(shadowmap, _vCoord).rgb;

  // Gets shadow distance
  fShadowDistance = vShadow.r * 256.0 + vShadow.g * (256.0 * 256.0) + vShadow.b * (256.0 * 256.0 * 256.0);
  fShadowDistance /= 1920.0;

  // Done!
  return step(_fDistance, fShadowDistance) * step(0.0, _fRadius - _fDistance);;
}

void main()
{
  vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
  vec4 colors[4] = vec4[4](vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));

  // For all lights
  for(int i = 0; i < 4; i++)
  {
    float fDistance, fMapIndex;
    vec2  vToPixel, vShadowCoord, vBlurOffset;

    // Gets to pixel vector
    vToPixel = gl_TexCoord[0].xy - SourceList[i].xy;
    vToPixel.y *= 1080.0/1920.0;

    // Gets distance
    fDistance = length(vToPixel);

    // Normalizes it
    vToPixel *= vec2(1.0 / fDistance);

    // Gets shadow map index
    if(vToPixel.y < 0.0)
    {
      fMapIndex = 1.0 - (atan(-vToPixel.y, vToPixel.x) / 6.283185);
    }
    else
    {
      fMapIndex = atan(vToPixel.y, vToPixel.x) / 6.283185;
    }

    // Gets texture coord
    vShadowCoord = vec2(fMapIndex, (float(i) / 5.0) + 0.1);

    // Updates contribution
    float contrib = min(GetShadowContribution(vShadowCoord, fDistance, SourceRadiusList[i]), 1.0);
    color += vec4(contrib) * colors[i];
  }

  // Updates color
  gl_FragColor = color;
}"
ParamList       = shadowmap # resolution # SourceRadiusList # SourceList
resolution      = (1920, 1080, 0); @ShadowViewport.Size
SourceRadiusList= 0 # 0 # 0 # 0
SourceList      = (0, 0, 0) # (0, 0, 0) # (0, 0, 0) # (0, 0, 0)
shadowmap       = ShadowTexture

[CompositingViewport]
BackgroundColor= (0, 0, 0)
BlendMode     = none
ShaderList    = @
Code          = "
void main()
{
  vec4 vBack, vLevel;

  vBack   = texture2D(Back, gl_TexCoord[0].xy);
  vLevel  = texture2D(Level, gl_TexCoord[0].xy);

  gl_FragColor = vec4(mix(vLevel.rgb, vBack.rgb, vBack.a), 1.0);
}"
UseCustomParam= false
ParamList     = Back # Level # Time
Back          = BackTexture
Level         = LevelTexture
Time          = 0

[Mouse]
ShowCursor    = true

[Physics]
Gravity       = (0, 0, 0)

[Screenshot]
Directory     = ../../screenshot
BaseName      = Waves-
Extension     = png
Digits        = 4

[RunTime]
Source        = 0

[Save]
CurrentLevel  = 0


@ui.ini@
@objects.ini@
@level.ini@
@tracks.ini@
@commondev.ini@
@dev.ini@
